{
	"name": "insertDeltaLake-function",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sdpdev01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8c8ea5f8-2215-49b2-9f12-c584bd9fdf06"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f6a17236-97ab-492e-ac2e-bb5080d2dd15/resourceGroups/rg-etluplift-dev-01/providers/Microsoft.Synapse/workspaces/syn-etluplift-dev01/bigDataPools/sdpdev01",
				"name": "sdpdev01",
				"type": "Spark",
				"endpoint": "https://syn-etluplift-dev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sdpdev01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"import datetime\r\n",
					"from pyspark.sql.window import *"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"def insertDeltaLake(df, TargetTable, Container, Folder, WriteMode):\r\n",
					"    # ##########################################################################################################################  \r\n",
					"    # Function: insertDeltaLake\r\n",
					"    # Performs a Insert/Overwrite action on Delta Table\r\n",
					"    #\r\n",
					"    # Parameters:\r\n",
					"    # df = input dataframe\r\n",
					"    # TargetTable = Name of Target Table\r\n",
					"    # Container = Container used for creating Delta table schema and merging new data\r\n",
					"    # Folder = Folder used for creating Delta table schema and merging new data\r\n",
					"    # WriteMode = Wether the write option is Overwrite/Append\r\n",
					"    # Need to Enable Schema Evolution\r\n",
					"    # spark.sql(\"SET spark.databricks.delta.schema.autoMerge.enabled = true\") \r\n",
					"    # \r\n",
					"    # Returns:\r\n",
					"    deltaZone = mssparkutils.credentials.getSecretWithLS(\"Key Vault\",\"DeltaLake-StorageAccount\")\r\n",
					"    deltaZoneKey = mssparkutils.credentials.getSecretWithLS(\"Key Vault\",\"DeltaLake-StorageAccessKey\")\r\n",
					"    spark.conf.set(\"fs.azure.account.key.\" + deltaZone + \".dfs.core.windows.net\",  deltaZoneKey)\r\n",
					"    deltaPath = \"abfss://\" + Container + \"@\"+ deltaZone + \".dfs.core.windows.net/\" + Folder\r\n",
					"\r\n",
					"    if WriteMode == \"append\" :\r\n",
					"        try:\r\n",
					"            df.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"append\").insertInto(TargetTable)\r\n",
					"        except:\r\n",
					"            df.write.format(\"delta\").save(deltaPath)\r\n",
					"\r\n",
					"    if WriteMode == \"overwrite\" :\r\n",
					"        df.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"overwrite\").save(deltaPath)\r\n",
					"\r\n",
					"    spark.sql(\"CREATE TABLE IF NOT EXISTS \" + TargetTable +\" USING DELTA LOCATION '\" + deltaPath + \"'\")"
				],
				"execution_count": 14
			}
		]
	}
}