{
	"name": "deltaLake-Functions",
	"properties": {
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "963b867f-3d54-4978-8cb4-578f9bf54a08"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /LinkedServiceFunctions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"deltaZone = GetLinkedServiceEndpoint(\"DataZone\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def snapshotDelta(df, TargetTable,  Container, Folder, KeyColumns):\r\n",
					"    # ##########################################################################################################################  \r\n",
					"    # Function: snapshotDelta\r\n",
					"    # Performs a Snapshot Delete reload action on Delta Table\r\n",
					"    #\r\n",
					"    # Parameters:\r\n",
					"    # df = input dataframe\r\n",
					"    # TargetTable = Name of Target Table\r\n",
					"    # Container = Container used for creating Delta table schema and merging new data\r\n",
					"    # Folder = Folder used for creating Delta table schema and merging new data\r\n",
					"    # KeyColumns = List of columns that uniquely defines a record in input dataframe\r\n",
					" \r\n",
					"    # Returns:\r\n",
					"    # \r\n",
					"    # ##########################################################################################################################\r\n",
					"    \r\n",
					"    #Source and Target Alias\r\n",
					"    targetTableAlias = \"Target\"\r\n",
					"    stagingTableAlias = \"Source\"\r\n",
					"    \r\n",
					"    deltaPath = \"abfss://\" + Container + \"@\"+ deltaZone + Folder\r\n",
					" \r\n",
					"    uniqueCols = KeyColumns.split(\"|\")\r\n",
					"\r\n",
					"    #Check the Table/Path is a Delta Table \r\n",
					"    pathExists = False\r\n",
					"    tableExists = False\r\n",
					"    try:\r\n",
					"        DeltaTable.forPath(spark, deltaPath)\r\n",
					"        pathExists = True        \r\n",
					"    except:\r\n",
					"        pass\r\n",
					"    try:\r\n",
					"        DeltaTable.forName(spark, TargetTable)\r\n",
					"        tableExists = True        \r\n",
					"    except:\r\n",
					"        pass\r\n",
					"        \r\n",
					"    if pathExists == True and tableExists == True:\r\n",
					"                \r\n",
					"        # Delete records from destination for the snapshot period being loaded\r\n",
					"        deltaTable = DeltaTable.forName(spark, TargetTable)\r\n",
					"        remove  = \"and\"\r\n",
					"        reverse_remove = remove[::-1]\r\n",
					"        \r\n",
					"        distinctCols = df.select(uniqueCols).distinct().collect()\r\n",
					"        for k in distinctCols :\r\n",
					"            deleteCondn = \"\"\r\n",
					"            for i in range(len(k)):\r\n",
					"                deleteCondn = deleteCondn + str(uniqueCols[i]) + \" = '\" + str(k[i]) + \"' and \"\r\n",
					"            deleteCondn = deleteCondn[::-1].replace(reverse_remove,\"\",1)[::-1]\r\n",
					"            deltaTable.delete(deleteCondn)\r\n",
					"            print(deleteCondn)\r\n",
					"\r\n",
					"        # Insert records from source\r\n",
					"        columns = (((str(df.columns).replace(\"'\", \"\")).replace(\"[\",\"\")).replace(\"]\",\"\")).replace(\" \",\"\")\r\n",
					"        insertStatement = \"\"\r\n",
					"        insertColumns   = columns.split(\",\")\r\n",
					"        for insertCols in insertColumns:\r\n",
					"            insertStatement = insertStatement + '\"' + insertCols  + '\": \"' +  stagingTableAlias + \".\" + insertCols + '\", ' \r\n",
					"\r\n",
					"        # Convert Insert Expression in to Dict\r\n",
					"        insertStatement = json.loads(\"{\"+insertStatement.rstrip(', ')+\"}\")\r\n",
					"\r\n",
					"        lookupStatement = \" 1 = 2 \" \r\n",
					"        deltaTable.alias(targetTableAlias).merge(df.alias(stagingTableAlias), lookupStatement).whenNotMatchedInsert(values = insertStatement).execute()\r\n",
					"        \r\n",
					"    elif pathExists == False and tableExists == True:\r\n",
					"        raise Exception(\"Table Exists.Path Does Not Exist - Please check deployment configuration\")\r\n",
					"    elif pathExists == True and tableExists == False:\r\n",
					"        raise Exception(\"Path Exists.Table does not Exist - Please check deployment configuration\")\r\n",
					"    elif pathExists == False and tableExists == False:\r\n",
					"        raise Exception(\"Table does not exist - Please create through deployment configuration\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsertDeltaLake(df, TargetTable, Container, Folder, KeyColumns=None, DeltaColumn=None):\r\n",
					"    # ##########################################################################################################################  \r\n",
					"    # Function: upsertDeltaLake\r\n",
					"    # Performs a Merge/Upsert action on Delta Table\r\n",
					"    #\r\n",
					"    # Parameters:\r\n",
					"    # df = input dataframe\r\n",
					"    # TargetTable = Name of Target Table\r\n",
					"    # Container = Container used for creating Delta table schema and merging new data\r\n",
					"    # Folder = Folder used for creating Delta table schema and merging new data\r\n",
					"    # KeyColumns = List of columns that uniquely defines a record in input dataframe\r\n",
					"    # DeltaColumn = Name of watermark column in input dataframe\r\n",
					"    # \r\n",
					"    # Returns:\r\n",
					"    # Print - Lookup Statement\r\n",
					"\r\n",
					"    #Read Columns Names from Dataframe\r\n",
					"    deltaPath = \"abfss://\" + Container + \"@\"+ deltaZone + Folder\r\n",
					"\r\n",
					"    uniqueCols = KeyColumns.split(\"|\")\r\n",
					"\r\n",
					"    #Create Schema\r\n",
					"    DeltaTable.createIfNotExists(spark) \\\r\n",
					"    .location(deltaPath) \\\r\n",
					"    .addColumns(df.schema) \\\r\n",
					"    .execute()\r\n",
					"\r\n",
					"    lookupStatement = \"\"  \r\n",
					"    for lookupCol in uniqueCols:\r\n",
					"        lookupStatement = lookupStatement + TargetTableAlias + \".\" + lookupCol  + \" = \" + stagingTableAlias + \".\" + lookupCol + \" and \" \r\n",
					"\r\n",
					"    watermarkLookup = \"\"\r\n",
					"    if DeltaColumn is not None and  len(DeltaColumn) >0:\r\n",
					"        lookupUpdateStatement = lookupStatement + stagingTableAlias  +\".\"+ DeltaColumn  + \" >= \"+ TargetTableAlias + \".\" + DeltaColumn + \" and \" + TargetTableAlias  +\".\"+ DeltaColumn  + \" < \"+ stagingTableAlias + \".\" + DeltaColumn\r\n",
					"        remove=\"and\"\r\n",
					"        reverse_remove=remove[::-1]\r\n",
					"        lookupStatement = lookupStatement[::-1].replace(reverse_remove,\"\",1)[::-1]\r\n",
					"\r\n",
					"    if DeltaColumn is None or len(DeltaColumn)==0:\r\n",
					"        remove=\"and\"\r\n",
					"        reverse_remove=remove[::-1]\r\n",
					"        lookupStatement = lookupStatement[::-1].replace(reverse_remove,\"\",1)[::-1]\r\n",
					"        lookupUpdateStatement = lookupStatement\r\n",
					"\r\n",
					"    #Update Expression\r\n",
					"    updateStatement = \"\"\r\n",
					"    updateColumns = columns.split(\",\")\r\n",
					"    for updateCols in updateColumns:\r\n",
					"        updateStatement = updateStatement + '\"' +updateCols  + '\": \"' +  stagingTableAlias + \".\" + updateCols + '\", ' \r\n",
					"\r\n",
					"    #Convert Insert and Update Expression in to Dict\r\n",
					"    updateStatement = json.loads(\"{\"+updateStatement.rstrip(', ')+\"}\")\r\n",
					"    \r\n",
					"    # Write to DeltaPath\r\n",
					"    deltaTable = DeltaTable.forPath(spark, deltaPath)\r\n",
					"    deltaTable.alias(TargetTableAlias).merge(df.alias(stagingTableAlias), lookupUpdateStatement).whenMatchedUpdate(set = updateStatement).execute()\r\n",
					"    deltaTable.alias(TargetTableAlias).merge(df.alias(stagingTableAlias), lookupStatement).whenNotMatchedInsert(values = updateStatement).execute()\r\n",
					"    \r\n",
					"    #Create Table\r\n",
					"    spark.sql(\"CREATE TABLE IF NOT EXISTS \" + TargetTable +\" USING DELTA LOCATION '\" + deltaPath + \"'\")\r\n",
					"    print(lookupUpdateStatement +\"; \" + lookupStatement)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def insertDelta(df, TargetTable, Container, Folder):\r\n",
					"    # ##########################################################################################################################  \r\n",
					"    # Function: InsertDelta\r\n",
					"    # Performs an Insert action on Delta Table\r\n",
					"    #\r\n",
					"    # Parameters:\r\n",
					"    # df = input dataframe\r\n",
					"    # TargetTable = Name of Target Table\r\n",
					"    # Container = Container used for creating Delta table schema and merging new data\r\n",
					"    # Folder = Folder used for creating Delta table schema and merging new data\r\n",
					"    # \r\n",
					"    # Returns:\r\n",
					"    # \r\n",
					"    # ########################################################################################################################## \r\n",
					"    \r\n",
					"    targetDeltaPath = \"abfss://\" + Container + \"@\"+ deltaZone + Folder\r\n",
					"    targetTableAlias = \"tgt\"\r\n",
					"    stagingTableAlias = \"stg\"\r\n",
					"    \r\n",
					"     #Check the Table/Path is a Delta Table \r\n",
					"    pathExists = False\r\n",
					"    tableExists = False\r\n",
					"    try:\r\n",
					"        DeltaTable.forPath(spark, targetDeltaPath)\r\n",
					"        pathExists = True        \r\n",
					"    except:\r\n",
					"        pass\r\n",
					"    try:\r\n",
					"        DeltaTable.forName(spark, TargetTable)\r\n",
					"        tableExists = True        \r\n",
					"    except:\r\n",
					"        pass\r\n",
					"        \r\n",
					"    #Write to TargetTable - Append records from source\r\n",
					"    if pathExists == True and tableExists == True:\r\n",
					"        deltaTable = DeltaTable.forName(spark, TargetTable)\r\n",
					"        columns = (((str(df.columns).replace(\"'\", \"\")).replace(\"[\",\"\")).replace(\"]\",\"\")).replace(\" \",\"\")\r\n",
					"        insertStatement = \"\"\r\n",
					"        insertColumns   = columns.split(\",\")\r\n",
					"        for insertCols in insertColumns:\r\n",
					"            insertStatement = insertStatement + '\"' + insertCols  + '\": \"' +  stagingTableAlias + \".\" + insertCols + '\", ' \r\n",
					"\r\n",
					"        # Convert Insert Expression in to Dict\r\n",
					"        insertStatement = json.loads(\"{\"+insertStatement.rstrip(', ')+\"}\")\r\n",
					"\r\n",
					"        lookupStatement = \" 1 = 2 \" \r\n",
					"        deltaTable.alias(targetTableAlias).merge(df.alias(stagingTableAlias), lookupStatement).whenNotMatchedInsert(values = insertStatement).execute()\r\n",
					"        \r\n",
					"    elif pathExists == False and tableExists == True:\r\n",
					"        raise Exception(\"Table Exists.Path Does Not Exist - Please check deployment configuration\")\r\n",
					"    elif pathExists == True and tableExists == False:\r\n",
					"        raise Exception(\"Path Exists.Table does not Exist - Please check deployment configuration\")\r\n",
					"    elif pathExists == False and tableExists == False:\r\n",
					"        raise Exception(\"Table does not exist - Please create through deployment configuration\")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DeltaTableDeployment(TableName, StorageZoneLinkedServiceName, FileSystem, Folder, Schema):\r\n",
					"    # ##########################################################################################################################  \r\n",
					"    # Function: DeltaTableDeployment\r\n",
					"    # Performs Delta Table Schema Deployments\r\n",
					"    #\r\n",
					"    # Parameters:\r\n",
					"    # TableName = DeltaTable Name\r\n",
					"    # StorageZoneLinkedServiceName = Linked service name for the storage zone\r\n",
					"    # FileSystem = FileSystem used for creating Delta table schema and merging new data\r\n",
					"    # Folder = Folder used for creating Delta table schema and merging new data\r\n",
					"    # Schema = Delta Table Schema\r\n",
					"    # \r\n",
					"    # Returns:\r\n",
					"    # \r\n",
					"    # ########################################################################################################################## \r\n",
					"\r\n",
					"    #Creates an Empty Dataframe with the desired Schema\r\n",
					"    dfSchema = spark.createDataFrame([], Schema)\r\n",
					"\r\n",
					"    #Check the Table/Path is a Delta Table \r\n",
					"    pathExists = False\r\n",
					"    tableExists = False\r\n",
					"    try:\r\n",
					"        DeltaTable.forPath(spark, deltapath)\r\n",
					"        pathExists = True        \r\n",
					"    except:\r\n",
					"        pass\r\n",
					"    try:\r\n",
					"        DeltaTable.forName(spark, TableName)\r\n",
					"        tableExists = True        \r\n",
					"    except:\r\n",
					"        pass\r\n",
					"\r\n",
					"    if pathExists == True and tableExists == True:\r\n",
					"        dfCurrentTable = spark.read.table(TableName)\r\n",
					"\r\n",
					"        if dfSchema.schema == dfCurrentTable.schema:\r\n",
					"            print(\"Schema is Identical, no change required - \" + TableName)\r\n",
					"        if dfSchema.schema != dfCurrentTable.schema:\r\n",
					"            print(\"Schema changes required\")\r\n",
					"            \r\n",
					"            #Select Schema Columns\r\n",
					"            dfFinal = dfSchema.unionByName(dfCurrentTable, allowMissingColumns=True)\r\n",
					"            dfFinal = dfFinal.select(dfSchema.columns)\r\n",
					"\r\n",
					"            for field in dfSchema.schema.fields:\r\n",
					"                dataType = str(field.dataType)\r\n",
					"                columnName = str(field.name)\r\n",
					"\r\n",
					"                if search(\"Decimal\", str(field.dataType)):\r\n",
					"                    dfFinal = dfFinal.withColumn(columnName, col(columnName).cast(eval(dataType)))\r\n",
					"                else:\r\n",
					"                    dataType = dataType + \"()\"\r\n",
					"                    dfFinal = dfFinal.withColumn(columnName, col(columnName).cast(eval(dataType)))\r\n",
					"\r\n",
					"            spark.sql(\"Drop table IF EXISTS \" + TableName)\r\n",
					"            dfFinal.write.option(\"overwriteSchema\", \"true\").format(\"delta\").mode(\"overwrite\").save(deltapath)\r\n",
					"            spark.sql(\"CREATE TABLE IF NOT EXISTS \" + TableName +\" USING DELTA LOCATION '\" + deltapath + \"'\")\r\n",
					"            print(\"Schema updated - \" + TableName)      \r\n",
					"\r\n",
					"    #Create Table if not exists\r\n",
					"    if pathExists == False and tableExists == False:\r\n",
					"            dfSchema.write.option(\"overwriteSchema\", \"true\").format(\"delta\").mode(\"overwrite\").save(deltapath)\r\n",
					"            spark.sql(\"CREATE TABLE IF NOT EXISTS \" + TableName +\" USING DELTA LOCATION '\" + deltapath + \"'\")\r\n",
					"            print(\"Delta Table did not exist, Table Created - \" + TableName)\r\n",
					"    if (pathExists == False and tableExists == True) or (pathExists == True and tableExists == False):\r\n",
					"        print(\"Path already exists - \" + str(pathExists))\r\n",
					"        print(\"Table already exists - \" + str(tableExists))"
				],
				"execution_count": null
			}
		]
	}
}