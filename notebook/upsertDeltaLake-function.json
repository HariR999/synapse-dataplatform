{
	"name": "upsertDeltaLake-function",
	"properties": {
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "small31",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "44550066-6e79-4312-9915-3b34215fc256"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
				"name": "small31",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"import datetime\r\n",
					"from pyspark.sql.window import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsertDeltaLake(df, TargetTable, Container, Folder, KeyColumns=None, DeltaColumn=None):\r\n",
					"    # ##########################################################################################################################  \r\n",
					"    # Function: upsertDeltaLake\r\n",
					"    # Performs a Merge/Upsert action on Delta Table\r\n",
					"    #\r\n",
					"    # Parameters:\r\n",
					"    # df = input dataframe\r\n",
					"    # TargetTable = Name of Target Table\r\n",
					"    # Container = Container used for creating Delta table schema and merging new data\r\n",
					"    # Folder = Folder used for creating Delta table schema and merging new data\r\n",
					"    # KeyColumns = List of columns that uniquely defines a record in input dataframe\r\n",
					"    # DeltaColumn = Name of watermark column in input dataframe\r\n",
					"    # \r\n",
					"    # Returns:\r\n",
					"    # Print - Lookup Statement\r\n",
					"      \r\n",
					"    deltaZone = mssparkutils.credentials.getSecretWithLS(\"Key Vault\",\"DeltaLake-StorageAccount\")\r\n",
					"    deltaZoneKey = mssparkutils.credentials.getSecretWithLS(\"Key Vault\",\"DeltaLake-StorageAccessKey\")\r\n",
					"    spark.conf.set(\"fs.azure.account.key.\" + deltaZone + \".dfs.core.windows.net\",   deltaZoneKey)\r\n",
					"\r\n",
					"    #Read Columns Names from Dataframe\r\n",
					"    deltaPath = \"abfss://\" + Container + \"@\"+ deltaZone + \".dfs.core.windows.net/\" + Folder\r\n",
					"    columns = (((str(df.columns).replace(\"'\", \"\")).replace(\"[\",\"\")).replace(\"]\",\"\")).replace(\" \",\"\")\r\n",
					"\r\n",
					"    uniqueCols = KeyColumns.split(\"|\")\r\n",
					"\r\n",
					"    #Create Schema\r\n",
					"    DeltaTable.createIfNotExists(spark) \\\r\n",
					"    .location(deltaPath) \\\r\n",
					"    .addColumns(df.schema) \\\r\n",
					"    .execute()\r\n",
					"\r\n",
					"    lookupStatement = \"\"  \r\n",
					"    for lookupCol in uniqueCols:\r\n",
					"        lookupStatement = lookupStatement + TargetTableAlias + \".\" + lookupCol  + \" = \" + stagingTableAlias + \".\" + lookupCol + \" and \" \r\n",
					"\r\n",
					"    watermarkLookup = \"\"\r\n",
					"    if DeltaColumn is not None and  len(DeltaColumn) >0:\r\n",
					"        lookupUpdateStatement = lookupStatement + stagingTableAlias  +\".\"+ DeltaColumn  + \" >= \"+ TargetTableAlias + \".\" + DeltaColumn + \" and \" + TargetTableAlias  +\".\"+ DeltaColumn  + \" < \"+ stagingTableAlias + \".\" + DeltaColumn\r\n",
					"        remove=\"and\"\r\n",
					"        reverse_remove=remove[::-1]\r\n",
					"        lookupStatement = lookupStatement[::-1].replace(reverse_remove,\"\",1)[::-1]\r\n",
					"\r\n",
					"    if DeltaColumn is None or len(DeltaColumn)==0:\r\n",
					"        remove=\"and\"\r\n",
					"        reverse_remove=remove[::-1]\r\n",
					"        lookupStatement = lookupStatement[::-1].replace(reverse_remove,\"\",1)[::-1]\r\n",
					"        lookupUpdateStatement = lookupStatement\r\n",
					"\r\n",
					"    #Update Expression\r\n",
					"    updateStatement = \"\"\r\n",
					"    updateColumns = columns.split(\",\")\r\n",
					"    for updateCols in updateColumns:\r\n",
					"        updateStatement = updateStatement + '\"' +updateCols  + '\": \"' +  stagingTableAlias + \".\" + updateCols + '\", ' \r\n",
					"\r\n",
					"    #Convert Insert and Update Expression in to Dict\r\n",
					"    updateStatement = json.loads(\"{\"+updateStatement.rstrip(', ')+\"}\")\r\n",
					"    \r\n",
					"    # Write to DeltaPath\r\n",
					"    deltaTable = DeltaTable.forPath(spark, deltaPath)\r\n",
					"    deltaTable.alias(TargetTableAlias).merge(df.alias(stagingTableAlias), lookupUpdateStatement).whenMatchedUpdate(set = updateStatement).execute()\r\n",
					"    deltaTable.alias(TargetTableAlias).merge(df.alias(stagingTableAlias), lookupStatement).whenNotMatchedInsert(values = updateStatement).execute()\r\n",
					"    \r\n",
					"    #Create Table\r\n",
					"    spark.sql(\"CREATE TABLE IF NOT EXISTS \" + TargetTable +\" USING DELTA LOCATION '\" + deltaPath + \"'\")\r\n",
					"    print(lookupUpdateStatement +\"; \" + lookupStatement)"
				],
				"execution_count": 3
			}
		]
	}
}